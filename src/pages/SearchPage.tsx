'use client'

// src/pages/SearchPage.tsx
import { useState, useEffect } from 'react'
import { useSearchParams } from 'react-router-dom'
import type { MovieListItem, PaginationInfo } from '../type' // S·ª≠a ƒë·ªïi: Th√™m PaginationInfo
import MovieCard from '../components/MovieCard'
import Loader from '../components/Loader'
import CategoryHeader from '../components/CategoryHeader'
import Pagination from '../components/Pagination' // D√≤ng m·ªõi: Import component Pagination

const SearchPage = () => {
  const [searchParams, setSearchParams] = useSearchParams()
  const keyword = searchParams.get('q') || ''
  const page = parseInt(searchParams.get('page') || '1', 10) // D√≤ng m·ªõi: L·∫•y page t·ª´ URL

  const [movies, setMovies] = useState<MovieListItem[]>([])
  const [paginationInfo, setPaginationInfo] = useState<PaginationInfo | null>(null) // D√≤ng m·ªõi: State cho th√¥ng tin ph√¢n trang
  const [loading, setLoading] = useState<boolean>(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (!keyword) {
      setMovies([])
      setPaginationInfo(null)
      setLoading(false)
      return
    }

    const fetchSearchResults = async () => {
      setLoading(true)
      setError(null)
      try {
        // S·ª≠a ƒë·ªïi: Th√™m `&page=${page}` v√†o URL
        const response = await fetch(
          `https://phim.nguonc.com/api/films/search?keyword=${keyword}&page=${page}`,
        )
        if (!response.ok) throw new Error('L·ªói khi t√¨m ki·∫øm phim')

        // S·ª≠a ƒë·ªïi: API tr·∫£ v·ªÅ c√≥ `paginate`, n√™n kh√¥ng c·∫ßn d√πng Omit
        const data = await response.json()

        if (data.status === 'success') {
          setMovies(data.items || [])
          setPaginationInfo(data.paginate || null) // D√≤ng m·ªõi: L∆∞u th√¥ng tin ph√¢n trang
        } else {
          setMovies([])
          setPaginationInfo(null)
        }
      } catch (err: any) {
        setError(err.message)
      } finally {
        setLoading(false)
        window.scrollTo({ top: 0, behavior: 'smooth' }) // Cu·ªôn l√™n ƒë·∫ßu khi chuy·ªÉn trang
      }
    }

    fetchSearchResults()
  }, [keyword, page]) // S·ª≠a ƒë·ªïi: Ch·∫°y l·∫°i effect khi `page` thay ƒë·ªïi

  // D√≤ng m·ªõi: H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng chuy·ªÉn trang
  const handlePageChange = (newPage: number) => {
    setSearchParams({ q: keyword, page: newPage.toString() })
  }

  if (loading) return <Loader />
  if (error) return <div className="error-message">L·ªói: {error}</div>

  return (
    <div className="search-page-container">
      <CategoryHeader type="search" searchKeyword={keyword} />

      {movies.length > 0 ? (
        <>
          <div className="movie-grid">
            {movies.map((movie) => (
              <MovieCard key={movie.slug} movie={movie} />
            ))}
          </div>
          {/* D√≤ng m·ªõi: Hi·ªÉn th·ªã Pagination n·∫øu c√≥ nhi·ªÅu h∆°n 1 trang */}
          {paginationInfo && paginationInfo.total_page > 1 && (
            <Pagination
              currentPage={paginationInfo.current_page}
              totalPages={paginationInfo.total_page}
              onPageChange={handlePageChange}
            />
          )}
        </>
      ) : (
        <div className="no-results">
          <div className="no-results-icon">üîç</div>
          <h3>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h3>
          <p>
            Kh√¥ng c√≥ phim n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "{keyword}". H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c.
          </p>
        </div>
      )}
    </div>
  )
}

export default SearchPage
